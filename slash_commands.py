#!/usr/bin/env python
"""
Slash Command Wrapper - Auto-generated by /propagate-commands
This file provides a unified interface for all custom slash commands.
"""

import sys
import os
from pathlib import Path
import importlib.util
import argparse

# Add command directory to path
COMMAND_DIR = Path(__file__).parent / ".agent-os/commands"
sys.path.insert(0, str(COMMAND_DIR))

def load_command(command_name: str):
    """Dynamically load a command module."""
    # Remove leading slash and convert to module name
    module_name = command_name.lstrip('/').replace('-', '_')
    module_path = COMMAND_DIR / f"{module_name}.py"
    
    if not module_path.exists():
        print(f"‚ùå Command {command_name} not found!")
        print(f"   Looked for: {module_path}")
        return None
    
    # Load the module
    spec = importlib.util.spec_from_file_location(module_name, module_path)
    if spec and spec.loader:
        module = importlib.util.module_from_spec(spec)
        sys.modules[module_name] = module
        spec.loader.exec_module(module)
        return module
    
    return None

def list_available_commands():
    """List all available commands."""
    print("üìã Available Slash Commands:")
    print("=" * 40)
    
    # Load command registry if exists
    registry_file = Path(__file__).parent / ".command-registry.json"
    if registry_file.exists():
        import json
        with open(registry_file, 'r') as f:
            registry = json.load(f)
            for cmd, info in registry.get("commands", {}).items():
                print(f"  {cmd:<20} - {info.get('description', 'No description')}")
    else:
        # Scan command directory
        if COMMAND_DIR.exists():
            for py_file in sorted(COMMAND_DIR.glob("*.py")):
                if py_file.name != "__init__.py":
                    cmd_name = "/" + py_file.stem.replace('_', '-')
                    print(f"  {cmd_name}")
    
    print()
    print("Usage: ./slash_commands.py <command> [args...]")
    print("Example: ./slash_commands.py /modernize-deps --parallel=5")

def main():
    """Main entry point for slash commands."""
    if len(sys.argv) < 2:
        list_available_commands()
        sys.exit(0)
    
    command = sys.argv[1]
    
    # Special case: list commands
    if command in ["--list", "-l", "list"]:
        list_available_commands()
        sys.exit(0)
    
    # Load and execute command
    module = load_command(command)
    if module:
        # Check if module has a main function
        if hasattr(module, 'main'):
            # Pass remaining arguments to the command
            sys.argv = [command] + sys.argv[2:]
            sys.exit(module.main())
        else:
            print(f"‚ùå Command {command} does not have a main() function!")
            sys.exit(1)
    else:
        print(f"‚ùå Unknown command: {command}")
        print("Use --list to see available commands")
        sys.exit(1)

if __name__ == "__main__":
    main()
